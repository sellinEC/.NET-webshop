@page "/cart"
@inject ILocalStorageService LocalStorage
@inject NavigationManager navigationManager

<h3>Checkout</h3>

@{
    if (cart == null || cart.Count <= 0)
    {
        <p>No products to show</p>
    }
    else
    {
        <div class="container">
            @foreach (var product in cart)
            {
                <div class="d-flex bg-hej ">
                    <div class="w-10"><img src="@product.ImgUrl" class="item-image" /></div>
                    <div class="item-name">
                        <h5><a href="/products/@product.ProductId"></a>@product.ProductName</h5> <p>x @product.Quantity</p>
                    </div>
                    <div class="item-price">@(product.Quantity * product.Price) kr</div>
                </div>
            }
        <div class="item-price">Total: @cart.Sum(item => item.Price * item.Quantity) kr </div>
            
        </div>

    }

}

@if (users == null)
{
    <p>loading</p>
}
else
{
<div class="d-flex justify-content-center align-items-center mt-5" >
    <EditForm Model="@order" OnValidSubmit="@HandleValidSubmit">
        <InputSelect id="users" class="m-1" @bind-Value="@order.UserId">
            <option value="0">Select User  </option>
            @foreach (var user in users)
                {
                <option value=@user.Id>@user.FirstName.ToString() @user.LastName.ToString()</option>
                }

        </InputSelect>
        <button class="btn btn-success m-1 " type="submit">Checkout order</button>
    </EditForm>
</div>
}



@code {
    private List<CartItem> cart;
    private User[] users;
    private async Task GetUsersAsync()
    {
        users = await Http.GetFromJsonAsync<User[]>("https://localhost:44398/api/Users");



        foreach (var user in users)
        {
            Console.WriteLine(user.FirstName.ToString());
        }
        StateHasChanged();

    }


    protected override async void OnInitialized()
    {
        cart = await LocalStorage.GetItemAsync<List<CartItem>>("cart");
        await GetUsersAsync();
        StateHasChanged();

    }

    private CreateOrder order = new();


    private async Task HandleValidSubmit()
    {
        Console.WriteLine("clickety");
        var payload = new List<CreateOrderLines>();
        foreach (var item in cart)
        {
            var orderLines = new CreateOrderLines();
            orderLines.ProductId = item.ProductId;
            orderLines.Quantity = item.Quantity;
            payload.Add(orderLines);
        }

        order.OrderLines = payload;
        await Http.PostAsJsonAsync("https://localhost:44398/api/orders", order);
        await LocalStorage.RemoveItemAsync("cart");
        StateHasChanged();
        navigationManager.NavigateTo("/cart", true);
    }

}
