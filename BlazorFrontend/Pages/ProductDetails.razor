@page "/product/{id}"
@inject ILocalStorageService LocalStorage
@inject IToastService ToastService


<div class="container mt-5">
    <div class="d-flex justify-content-center align-items-center">

        <div class="m-4 card p-2 " style="height : 20rem">
            <h2>@Item.ProductName</h2>
            <p class="mt-2">@Item.ShortDescription</p>
            <p>@Item.LongDescription</p>
            <div class="">
                <h4>@Item.Price</h4>

                @if (Item.InStock)
                {
                    <span>
                        <i class="fas fa-cubes text-success font-weight-bold"></i>
                    </span>
                }
                else
                {
                    <span>
                        <i class="fas fa-cubes text-danger font-weight-bold"></i>
                    </span>
                }

            </div>
        </div>

        <img src="@Item.ImgUrl" alt="Alternate Text" style="height: 20rem" />


    </div>
    <EditForm Model="cartItem">
        <InputNumber id="quantity" @bind-Value="cartItem.Quantity" />
    </EditForm>
    @if (Item.InStock)
    {
        <button class="btn btn-secondary" @onclick="AddToCart">ADD TO CART</button>
    }
    else
    {
        <button class="btn btn-secondary disabled" @onclick="AddToCart">Out of stock</button>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    private CartItem cartItem = new CartItem { Quantity = 1 };

    @*public CartItem CartItem { get; set; } = new();*@
    public Product Item { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        Item = await Http.GetFromJsonAsync<Product>($"https://localhost:44398/api/Products/{Id}");
    }

   @* private Product getProduct()
    {
        var product = Item;
        return product;
    }*@
@*public event Action OnChange;*@

private async Task AddToCart()
{
    var cart = await LocalStorage.GetItemAsync<List<CartItem>>("cart");
    if (cart == null)
    {
        cart = new List<CartItem>();
    }
    //Kollar om lägga till mer quantity beroende på om redan finns
    var itemExists = cart.Find(x => x.ProductId == Item.Id);
    if (itemExists == null)
    {
        cartItem.ProductName = Item.ProductName;
        cartItem.ProductId = Item.Id;
        cartItem.ImgUrl = Item.ImgUrl;
        cartItem.Price = Item.Price;
        cart.Add(cartItem);
    }
    else
    {
        itemExists.Quantity += cartItem.Quantity;
    }

    await LocalStorage.SetItemAsync("cart", cart);
    ToastService.ShowSuccess(Item.ProductName, "Added to cart");
    
   

}
}
